import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras import layers, models
from tensorflow.keras.callbacks import ReduceLROnPlateau
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
import numpy as np

# Data Preprocessing
img_size = (260, 260)
batch_size = 32

# Data augmentation for training data with reduced transformations
train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,
    rotation_range=20,  # Reduced rotation range
    width_shift_range=0.1,  # Reduced width shift
    height_shift_range=0.1,  # Reduced height shift
    shear_range=0.1,  # Reduced shear
    zoom_range=0.1,  # Reduced zoom
    horizontal_flip=True,
    fill_mode='nearest'
)

# Data preprocessing for validation data
test_datagen = ImageDataGenerator(rescale=1.0 / 255)

# Load training data
train_generator = train_datagen.flow_from_directory(
    'dataset - Copy/train',
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary'
)

# Load testing data
test_generator = test_datagen.flow_from_directory(
    'dataset - Copy/test',
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    shuffle=False
)

# Transfer Learning with VGG16
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(260, 260, 3))

# Freeze the base model layers
for layer in base_model.layers:
    layer.trainable = False

# Create the model
model = models.Sequential()
model.add(base_model)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu')) 
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.5)) 
model.add(layers.Dense(128, activation='relu')) 
model.add(layers.Dense(1, activation='sigmoid'))  

# Compile the model
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),
              loss='binary_crossentropy', 
              metrics=['accuracy'])

# Callbacks
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, min_lr=1e-7)

# Training the Model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    epochs=40,  
    validation_data=test_generator,
    validation_steps=test_generator.samples // batch_size,
    callbacks=[reduce_lr]
)

# Plotting Curves with Non-zero Accuracy
def plot_accuracy_and_loss(history):
    epochs = np.arange(1, len(history.history['accuracy']) + 1)
    
    # Filter for valid epochs where accuracy is greater than 0
    valid_epochs = [i for i, acc in enumerate(history.history['accuracy']) if acc > 0]
    
    plt.figure(figsize=(12, 4))

    # Plot training and validation accuracy
    plt.subplot(1, 2, 1)
    plt.plot(valid_epochs, np.array(history.history['accuracy'])[valid_epochs], label='Training Accuracy')
    plt.plot(valid_epochs, np.array(history.history['val_accuracy'])[valid_epochs], label='Validation Accuracy')
    plt.title('Model Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()

    # Plot training and validation loss
    plt.subplot(1, 2, 2)
    plt.plot(valid_epochs, np.array(history.history['loss'])[valid_epochs], label='Training Loss')
    plt.plot(valid_epochs, np.array(history.history['val_loss'])[valid_epochs], label='Validation Loss')
    plt.title('Model Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

    plt.tight_layout()
    plt.show()

# Call the plotting function
plot_accuracy_and_loss(history)

# Evaluate the Model
test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Test accuracy: {test_accuracy:.2f}')

# Predicting with the model
y_pred = model.predict(test_generator)
y_pred_classes = (y_pred > 0.5).astype(int)

# Get true labels
y_true = test_generator.classes
class_labels = list(test_generator.class_indices.keys())

# Confusion Matrix and Classification Report
cm = confusion_matrix(y_true, y_pred_classes)
print("Confusion Matrix:")
print(cm)

print("Classification Report:")
print(classification_report(y_true, y_pred_classes, target_names=class_labels))

# Function to plot confusion matrix
def plot_confusion_matrix(cm, class_labels):
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)
    plt.title('Confusion Matrix')
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.show()

# Plotting the Confusion Matrix
plot_confusion_matrix(cm, class_labels)

# Save the Model
model.save('bmodel.h5')
